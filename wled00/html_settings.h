/*
 * More web UI HTML source arrays.
 * This file is auto generated, please don't make any changes manually.
 * Instead, see https://kno.wled.ge/advanced/custom-features/#changing-web-ui
 * to find out how to easily modify the web UI source!
 */

// Autogenerated from wled00/data/style.css, do not edit!!
const char PAGE_settingsCss[] PROGMEM = R"=====(<style>:root{--c-1:#000;--c-f:#fff;--c-2:#050404;--c-3:#333;--c-4:#444;--c-5:#555;--c-6:#666;--c-8:#909090;--c-b:#bbb;--c-c:#ccc;--c-e:#eee;--c-d:#ddd;--c-r:#831;--t-b:0.5;--c-o:rgba(34, 34, 34, 0.9);--c-tb:rgba(34, 34, 34, var(--t-b));--c-tba:rgba(102, 102, 102, var(--t-b));--c-tbh:rgba(51, 51, 51, var(--t-b));--th:70px;--tp:70px;--bh:63px;--tbp:14px 14px 10px 14px;--bbp:9px 0 7px 0;--bhd:none;--bmt:0px}body{font-family:sans-serif;text-align:center;background:red;color:#fff;line-height:200%%;margin:10px 0 10px 0;overflow-x:hidden}::-webkit-scrollbar{display:none}hr{margin:10px auto}a{color:#28f;text-decoration:none}.btn,button,input[type=button][value=Apply],input[type=button][value=Upload]{outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:var(--white,#000);color:var(--black-900,#fff);border-radius:25px}.btn:hover,button:hover,input[type=button][value=Apply]:hover,input[type=button][value=Upload]:hover{background:var(--white,#fff);color:var(--black-900,#000);transition:.5s}.lnk{border:0}button.disabled,button[disabled]{color:#aaa}.helpB{text-align:left;position:absolute;left:10px;width:60px}.helpB button{width:40px}.topsettingsmenu{position:sticky;width:100vw;top:0;background-color:#000;border-bottom:2px solid #fff;margin-top:-1px;z-index:100}.bottomsettingsmenu{position:fixed;width:100vw;bottom:0;background-color:#000;border-top:2px solid #fff;margin-bottom:-1px;margin-top:100px;z-index:100}input{box-sizing:border-box;border:none;background-color:transparent;border:1px solid #909090;color:var(--c-f);font-weight:400;font-size:18px;margin:5px}input:disabled{color:#888}input[type=number]{width:4em;margin:2px 5px}input[type=number].xxl{width:100px}input[type=number].xl{width:85px}input[type=number].l{width:63px}input[type=number].m{width:56px}input[type=number].s{width:49px}input[type=number].xs{width:42px}input[type=checkbox]{transform:scale(1.5);background:0 0;margin:2px}select{box-sizing:border-box;margin:5px;padding:5px;background:var(--c-2);color:var(--c-f);border-radius:10px;border:2px solid var(--c-8)}select option{background-color:var(--c-2);color:var(--c-f)}td{padding:2px}.d5{width:4.5em!important}#toast{opacity:0;background-color:#444;border-radius:5px;bottom:64px;color:#fff;font-size:17px;padding:16px;pointer-events:none;position:fixed;text-align:center;z-index:5;transform:translateX(-50%%);max-width:90%%;left:50%%}#toast.show{opacity:1;background-color:#264;animation:fadein .5s,fadein .5s 2.5s reverse}#toast.error{opacity:1;background-color:#b21;animation:fadein .5s}h2{color:#4b9dc9;text-align:center;font-weight:550;font-size:25px;margin:20px}</style>)=====";


// Autogenerated from wled00/data/settings.htm, do not edit!!
const char PAGE_settings[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta 
name="viewport" content="width=device-width,initial-scale=1"><title>
Hypnotik Settings</title><script>
function H(){window.open("https://kno.wled.ge/features/settings/#time-settings")}function B(){window.open("/sliders","_self")}
</script><style>
hr{margin:2px auto}body{text-align:center;background:#000;margin:0;font-family:sans-serif}button{border:1px solid #909090;background:var(--white,#000);color:var(--black-900,#fff)}button:hover{background:var(--white,#fff);color:var(--black-900,#000);cursor:pointer;transition:.5s}button.settingsbutton{width:45vw;min-width:300px;margin:8px auto;display:flex;padding:10px;align-items:center;justify-content:center;border-radius:30px;text-align:center;font-size:20px;font-style:normal;font-weight:600;line-height:normal}.section-heading{color:#4b9dc9;text-align:center;font-weight:550;font-size:25px;margin:0 0 5px 0}
</style></head><body><div class="helpB" 
style="text-align:left;position:absolute;width:60px;margin-bottom:20px"><button 
type="button" onclick="H()" 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border-radius:25px;width:40px">
?</button></div><button type="button" onclick="B()" 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border-radius:25px">
Back</button><hr><div 
style="display:flex;align-items:center;justify-content:center;height:calc(100vh - 130px)">
<div><br><p class="section-heading">Settings</p><form action="/settings/wifi">
<button type="submit" class="settingsbutton">WiFi Setup</button></form><form 
action="/settings/leds"><button type="submit" class="settingsbutton">
LED Preferences</button></form><form action="/settings/sound"><button 
type="submit" class="settingsbutton">Sound Settings</button></form><form 
action="/settings/ui"><button type="submit" class="settingsbutton">
User Interface</button></form><form action="/settings/sync"><button 
type="submit" class="settingsbutton">Sync Interfaces</button></form><form 
action="/settings/time"><button type="submit" class="settingsbutton">
Time & Macros</button></form><form action="/settings/um"><button type="submit" 
class="settingsbutton">Usermods</button></form>%DMXMENU%<form action="/settings/sec">
<button type="submit" class="settingsbutton">Security & Updates</button></form>
</div></div><hr><button type="button" onclick="B()" 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border-radius:25px">
Back</button></body></html>)=====";


// Autogenerated from wled00/data/settings_wifi.htm, do not edit!!
const char PAGE_settings_wifi[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta 
name="viewport" content="width=500"><title>WiFi Settings</title><script>
var locip,d=document,loc=!1,locproto="http:",scanLoops=0,preScanSSID="";function gId(t){return d.getElementById(t)}function cE(t){return d.createElement(t)}function H(){window.open("https://kno.wled.ge/features/settings/#wifi-settings")}function B(){window.open(getURL("/settings"),"_self")}function N(){const t=gId("scan");t.disabled=!0,t.textContent="Scanning...",fetch(getURL("/json/net")).then(t=>t.json()).then(t=>Object.assign({},{networks:[]},t).networks.sort((t,e)=>e.rssi-t.rssi).reduce((t,e)=>(t.some(t=>t.ssid===e.ssid)||t.push(e),t),[])).then(e=>{if(0===e.length&&scanLoops<10)return scanLoops++,void setTimeout(N,1e3);scanLoops=0;let n=gId("CS");if(n){let t=cE("select");t.setAttribute("id","CS"),t.setAttribute("name","CS"),t.setAttribute("onchange","T()"),preScanSSID=n.value;for(let e=0;e<t.children.length;e++)t.removeChild(t.children[e]);for(let o=0;o<e.length;o++){const i=cE("option");i.setAttribute("value",e[o].ssid),i.textContent=`${e[o].ssid} (${e[o].rssi} dBm)`,e[o].ssid===n.value&&i.setAttribute("selected","selected"),t.appendChild(i)}const o=cE("option");o.setAttribute("value","!Cs"),o.textContent="Other network...",t.appendChild(o),n.replaceWith(t)}t.disabled=!1,t.textContent="Scan"})}function T(){let t=gId("CS");if(!t||"!Cs"!=t.value)return;let e=cE("input");e.type="text",e.id="CS",e.name="CS",e.setAttribute("maxlength",32),e.value=preScanSSID,t.replaceWith(e)}function loadJS(t,e=!0){let n=cE("script");n.setAttribute("src",t),n.setAttribute("type","text/javascript"),n.setAttribute("async",e),d.body.appendChild(n),n.addEventListener("load",()=>{GetV()}),n.addEventListener("error",t=>{console.log("Error on loading file",t),alert("Loading of configuration script failed.\nIncomplete page data!")})}function S(){let t=window.location;if("file:"==t.protocol)loc=!0,(locip=localStorage.getItem("locIp"))||(locip=prompt("File Mode. Please enter WLED IP!"),localStorage.setItem("locIp",locip));else{let e=t.pathname,n=e.slice(1,e.endsWith("/")?-1:void 0).split("/");n.length>2&&(locproto=t.protocol,loc=!0,locip=t.hostname+(t.port?":"+t.port:"")+"/"+n[0])}loadJS(getURL("/settings/s.js?p=1"),!1),loc&&(d.Sf.action=getURL("/settings/wifi"))}function getURL(t){return(loc?locproto+"//"+locip:"")+t}
</script><style>
:root{--c-1:#000;--c-f:#fff;--c-2:#050404;--c-3:#333;--c-4:#444;--c-5:#555;--c-6:#666;--c-8:#909090;--c-b:#bbb;--c-c:#ccc;--c-e:#eee;--c-d:#ddd;--c-r:#831;--t-b:0.5;--c-o:rgba(34, 34, 34, 0.9);--c-tb:rgba(34, 34, 34, var(--t-b));--c-tba:rgba(102, 102, 102, var(--t-b));--c-tbh:rgba(51, 51, 51, var(--t-b));--th:70px;--tp:70px;--bh:63px;--tbp:14px 14px 10px 14px;--bbp:9px 0 7px 0;--bhd:none;--bmt:0px}body{font-family:sans-serif;text-align:center;background:#000;color:#fff;line-height:200%;margin:10px 0 10px 0;overflow-x:hidden}::-webkit-scrollbar{display:none}hr{margin:10px auto}a{color:#28f;text-decoration:none}.btn,button,input[type=button][value=Apply],input[type=button][value=Upload]{outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:var(--white,#000);color:var(--black-900,#fff);border-radius:25px}.btn:hover,button:hover,input[type=button][value=Apply]:hover,input[type=button][value=Upload]:hover{background:var(--white,#fff);color:var(--black-900,#000)}.lnk{border:0}button.disabled,button[disabled]{color:#aaa}.helpB{text-align:left;position:absolute;left:10px;width:60px}.helpB button{width:40px}.topsettingsmenu{position:sticky;width:100vw;top:0;background-color:#000;border-bottom:2px solid #fff;margin-top:-1px;z-index:100}.bottomsettingsmenu{position:fixed;width:100vw;bottom:0;background-color:#000;border-top:2px solid #fff;margin-bottom:-1px;margin-top:100px;z-index:100}input{box-sizing:border-box;border:none;background-color:transparent;border:1px solid #909090;color:var(--c-f);font-weight:400;font-size:18px;margin:5px}input:disabled{color:#888}input[type=number]{width:4em;margin:2px 5px}input[type=number].xxl{width:100px}input[type=number].xl{width:85px}input[type=number].l{width:63px}input[type=number].m{width:56px}input[type=number].s{width:49px}input[type=number].xs{width:42px}input[type=checkbox]{transform:scale(1.5);background:0 0;margin:2px}select{box-sizing:border-box;margin:5px;padding:5px;background:var(--c-2);color:var(--c-f);border-radius:10px;border:2px solid var(--c-8)}select option{background-color:var(--c-2);color:var(--c-f)}td{padding:2px}.d5{width:4.5em!important}#toast{opacity:0;background-color:#444;border-radius:5px;bottom:64px;color:#fff;font-size:17px;padding:16px;pointer-events:none;position:fixed;text-align:center;z-index:5;transform:translateX(-50%);max-width:90%;left:50%}#toast.show{opacity:1;background-color:#264;animation:fadein .5s,fadein .5s 2.5s reverse}#toast.error{opacity:1;background-color:#b21;animation:fadein .5s}h2{color:#4b9dc9;text-align:center;font-weight:550;font-size:25px;margin:20px}
</style></head><body onload="S()" id="wifi_settings"><form id="form_s" 
name="Sf" method="post"><div class="topsettingsmenu"><div class="helpB"><button 
type="button" onclick="H()">?</button></div><button type="button" onclick="B()">
Back</button><button type="submit">Save</button></div><h2>WiFi setup</h2><h3>
Connect to existing network</h3><div 
style="display:flex;justify-content:center"><button class="scan-button" 
type="button" id="scan" onclick="N()">Scan</button></div>Network name:<br><input
 name="CS" maxlength="32" id="CS"><br>(SSID, empty to not connect)<br>
Network password:<br><input type="password" name="CP" maxlength="63"><br>
Static IP (leave at 0.0.0.0 for DHCP):<br><input name="I0" type="number" 
class="s" min="0" max="255" required value="0"> . <input name="I1" 
type="number" class="s" min="0" max="255" required value="0"> . <input 
name="I2" type="number" class="s" min="0" max="255" required value="0"> . <input
 name="I3" type="number" class="s" min="0" max="255" required value="0"><br>
Static gateway:<br><input name="G0" type="number" class="s" min="0" max="255">
 . <input name="G1" type="number" class="s" min="0" max="255"> . <input 
name="G2" type="number" class="s" min="0" max="255"> . <input name="G3" 
type="number" class="s" min="0" max="255"><br>Static subnet mask:<br><input 
name="S0" type="number" class="s" min="0" max="255"> . <input name="S1" 
type="number" class="s" min="0" max="255"> . <input name="S2" type="number" 
class="s" min="0" max="255"> . <input name="S3" type="number" class="s" min="0" 
max="255"><br>mDNS address (leave empty for no mDNS):<br>http:// <input 
name="CM" maxlength="32" value="hypnotik-"> .local<br><div 
style="margin-top:50px;height:1px"></div><div class="bottomsettingsmenu"><button
 type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div></form></body></html>)=====";


// Autogenerated from wled00/data/settings_leds.htm, do not edit!!
const char PAGE_settings_leds[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta 
name="viewport" content="width=500"><meta 
content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" 
name="viewport"><title>LED Settings</title><script>
var timeout,d=document,laprev=55,maxB=1,maxM=4e3,maxPB=4096,maxL=1333,maxLbquot=0,customStarts=!1,startsDirty=[],maxCOOverrides=5;function H(){window.open("https://kno.wled.ge/features/settings/#led-settings")}function B(){window.open("/settings","_self")}function gId(e){return d.getElementById(e)}function off(e){d.getElementsByName(e)[0].value=-1}function showToast(e,n=!1){var t=gId("toast");t.innerHTML=e,t.className=n?"error":"show",clearTimeout(timeout),t.style.animation="none",timeout=setTimeout((function(){t.className=t.className.replace("show","")}),2900)}function bLimits(e,n,t,a){maxB=e,maxM=t,maxPB=n,maxL=a}function pinsOK(){var e=d.getElementsByTagName("input");for(i=0;i<e.length;i++){var n=e[i].name.substring(0,2);if("L0"==n||"L1"==n||"L2"==n||"L3"==n){var t=e[i].name.substring(2);if(parseInt(d.getElementsByName("LT"+t)[0].value,10)>=80)continue}if(("L0"==n||"L1"==n||"L2"==n||"L3"==n||"L4"==n||"RL"==n||"BT"==n||"IR"==n)&&""!=e[i].value&&"-1"!=e[i].value){if(d.um_p&&d.um_p.some(n=>n==parseInt(e[i].value,10)))return alert(`Sorry, pins ${JSON.stringify(d.um_p)} can't be used.`),e[i].value="",e[i].focus(),!1;if(e[i].value>5&&e[i].value<12)return alert("Sorry, pins 6-11 can not be used."),e[i].value="",e[i].focus(),!1;if("IR"!=n&&"BT"!=n&&e[i].value>33)return alert("Sorry, pins >33 are input only."),e[i].value="",e[i].focus(),!1;for(j=i+1;j<e.length;j++){var a=e[j].name.substring(0,2);if("L0"==a||"L1"==a||"L2"==a||"L3"==a||"L4"==a||"RL"==a||"BT"==a||"IR"==a){if("L"===a.substring(0,1)){var s=e[j].name.substring(2);if(parseInt(d.getElementsByName("LT"+s)[0].value,10)>=80)continue}if(""!=e[j].value&&e[i].value==e[j].value)return alert(`Pin conflict between ${e[i].name}/${e[j].name}!`),e[j].value="",e[j].focus(),!1}}}}return!0}function trySubmit(e){if(d.Sf.data.value="",e.preventDefault(),!pinsOK())return e.stopPropagation(),!1;if(bquot>100){var n="Too many LEDs for me to handle!";maxM<1e4&&(n+="\n\rConsider using an ESP32."),alert(n)}d.Sf.checkValidity()&&d.Sf.submit()}function enABL(){var e=gId("able").checked;d.Sf.LA.value=e?laprev:0,gId("abl").style.display=e?"inline":"none",gId("psu2").style.display=e?"inline":"none",d.Sf.LA.value>0&&setABL()}function enLA(){var e=d.Sf.LAsel.value;d.Sf.LA.value=e,gId("LAdis").style.display=50==e?"inline":"none",UI()}function setABL(){switch(gId("able").checked=!0,d.Sf.LAsel.value=50,parseInt(d.Sf.LA.value)){case 0:gId("able").checked=!1,enABL();break;case 30:d.Sf.LAsel.value=30;break;case 35:d.Sf.LAsel.value=35;break;case 55:d.Sf.LAsel.value=55;break;case 255:d.Sf.LAsel.value=255;break;default:gId("LAdis").style.display="inline"}gId("m1").innerHTML=maxM,d.getElementsByName("Sf")[0].addEventListener("submit",trySubmit),UI()}function getMem(e,n){let t=parseInt(d.getElementsByName("LC"+n)[0].value);return t+=parseInt(d.getElementsByName("SL"+n)[0].value),e<32?maxM<1e4&&3==d.getElementsByName("L0"+n)[0].value?e>29?20*t:15*t:maxM>=1e4?e>29?8*t:6*t:e>29?4*t:3*t:e>31&&e<48?5:44==e||45==e?4*t:3*t}function UI(e=!1){var n=!1,t=0;gId("ampwarning").style.display=d.Sf.MA.value>7200?"inline":"none",255==d.Sf.LA.value?laprev=12:d.Sf.LA.value>0&&(laprev=d.Sf.LA.value);var a=d.getElementsByTagName("select");for(i=0;i<a.length;i++)if("LT"==a[i].name.substring(0,2)){var s=a[i].name.substring(2),l=parseInt(a[i].value,10);gId("p0d"+s).innerHTML=l>=80&&l<96?"IP address:":l>49?"Data GPIO:":l>41?"GPIOs:":"GPIO:",gId("p1d"+s).innerHTML=l>49&&l<64?"Clk GPIO:":"";var o=d.getElementsByName("L1"+s)[0];for(t+=getMem(l,s),f=1;f<5;f++){(o=d.getElementsByName("L"+f+s)[0])&&(l>=80&&l<96&&f<4||l>49&&1==f||l>41&&l<50&&f+40<l?(o.style.display="inline",o.required=!0):(o.style.display="none",o.required=!1,o.value=""))}e&&(gId("rf"+s).checked=gId("rf"+s).checked||31==l,l>31&&l<48&&(d.getElementsByName("LC"+s)[0].value=1)),gId("rf"+s).onclick=31==l?function(){return!1}:function(){},n|=30==l||31==l||l>40&&l<46&&43!=l,gId("co"+s).style.display=l>=80&&l<96||l>40&&l<48?"none":"inline",gId("dig"+s+"c").style.display=l>40&&l<48?"none":"inline",gId("dig"+s+"r").style.display=l>=80&&l<96?"none":"inline",gId("dig"+s+"s").style.display=l>=80&&l<96||l>40&&l<48?"none":"inline",gId("dig"+s+"f").style.display=l>=16&&l<32||l>=50&&l<64?"inline":"none",gId("rev"+s).innerHTML=l>40&&l<48?"Inverted output":"Reversed (rotated 180°)",gId("psd"+s).innerHTML=l>40&&l<48?"Index:":"Start:"}var r=d.querySelectorAll(".wc"),u=r.length;for(i=0;i<u;i++)r[i].style.display=n?"inline":"none";var p=d.getElementsByTagName("input"),m=0,v=0,c=0;for(i=0;i<p.length;i++){var g=p[i].name.substring(0,2);s=p[i].name.substring(2);if("LC"!=g){if("L0"==g||"L1"==g)d.getElementsByName("LC"+s)[0].max=maxPB;if("L0"==g||"L1"==g||"L2"==g||"L3"==g){if((l=parseInt(d.getElementsByName("LT"+s)[0].value))>=80){p[i].max=255,p[i].min=0,p[i].style.color="#fff";continue}p[i].max=33,p[i].min=-1}if(("L0"==g||"L1"==g||"L2"==g||"L3"==g||"L4"==g||"RL"==g||"BT"==g||"IR"==g)&&""!=p[i].value&&"-1"!=p[i].value){var f=[];if(d.um_p&&Array.isArray(d.um_p))for(k=0;k<d.um_p.length;k++)f.push(d.um_p[k]);for(j=0;j<p.length;j++)if(i!=j){var y=p[j].name.substring(0,2);if("L0"==y||"L1"==y||"L2"==y||"L3"==y||"L4"==y||"RL"==y||"BT"==y||"IR"==y){if("L"===y.substring(0,1)){var L=p[j].name.substring(2);if(parseInt(d.getElementsByName("LT"+L)[0].value,10)>=80)continue}""!=p[j].value&&"-1"!=p[j].value&&f.push(parseInt(p[j].value,10))}}f.some(e=>e==parseInt(p[i].value,10))?p[i].style.color="red":p[i].style.color=parseInt(p[i].value,10)>33?"orange":"#fff"}}else{var I=parseInt(p[i].value,10);customStarts&&startsDirty[s]||(gId("ls"+s).value=m),gId("ls"+s).disabled=!customStarts,I&&((a=parseInt(gId("ls"+s).value))+I>m&&(m=a+I),I>c&&(c=I),(l=parseInt(d.getElementsByName("LT"+s)[0].value))<80&&(v+=I))}}gId("lc").textContent=m,gId("pc").textContent=m==v?"":"("+v+" physical)",gId("m0").innerHTML=t,bquot=t/maxM*100,gId("dbar").style.background=`linear-gradient(90deg, ${bquot>60?bquot>90?"red":"orange":"#ccc"} 0 ${bquot}%%, #444 ${bquot}%% 100%%)`,gId("ledwarning").style.display=c>Math.min(maxPB,800)||bquot>80?"inline":"none",gId("ledwarning").style.color=c>Math.max(maxPB,800)||bquot>100?"red":"orange",gId("wreason").innerHTML=bquot>80?"80% of max. LED memory"+(bquot>100?` (<b>ERROR: Using over ${maxM}B!</b>)`:""):"800 LEDs per output";var b=Math.ceil((100+v*laprev)/500)/2;b=b>5?Math.ceil(b):b;a="";var B=30==d.Sf.LAsel.value,h=255==d.Sf.LAsel.value;b<1.02&&!B&&!h?a="ESP 5V pin with 1A USB supply":(a+=B?"12V ":h?"WS2815 12V ":"5V ",a+=b,a+="A supply connected to LEDs");var S=Math.ceil((100+v*laprev)/1500)/2,x="(for most effects, ~";x+=S=S>5?Math.ceil(S):S,x+="A is enough)<br>",gId("psu").innerHTML=a,gId("psu2").innerHTML=h?"":x,gId("json").style.display=8==d.Sf.IT.value?"":"none";var E=parseInt(d.Sf.SOMP.value,10),$=parseInt(d.Sf.MXW.value,10),T=parseInt(d.Sf.MXH.value,10);if(isNaN($)||isNaN(T)||!($>0||T>0)||$*T==parseInt(m,10)||1!=E){gId("2dwarning").style.display="none";for(let e of d.Sf.querySelectorAll('button[type="submit"]'))e.disabled=!1}else{gId("2dwarning").style.display="inline";for(let e of d.Sf.querySelectorAll('button[type="submit"]'))e.disabled=!0}}function lastEnd(e){if(e<1)return 0;v=parseInt(d.getElementsByName("LS"+(e-1))[0].value)+parseInt(d.getElementsByName("LC"+(e-1))[0].value);var n=parseInt(d.getElementsByName("LT"+(e-1))[0].value);return n>31&&n<48&&(v=1),isNaN(v)?0:v}function addLEDs(e,n=!0){var t=d.getElementsByClassName("iST"),a=t.length;if(!(1==e&&a>=maxB||-1==e&&0==a)){var i=gId("mLC");if(1==e){var s=`<div class="iST">\n<hr style="width:260px">\n${a+1}:\n<select name="LT${a}" onchange="UI(true)">\n<option value="22" selected>WS281x</option>\n<option value="30">SK6812 RGBW</option>\n<option value="31">TM1814</option>\n<option value="24">400kHz</option>\n<option value="50">WS2801</option>\n<option value="51">APA102</option>\n<option value="52">LPD8806</option>\n<option value="54">LPD6803</option>\n<option value="53">P9813</option>\n<option value="41">PWM White</option>\n<option value="42">PWM CCT</option>\n<option value="43">PWM RGB</option>\n<option value="44">PWM RGBW</option>\n<option value="45">PWM RGB+CCT</option>\n\x3c!--option value="46">PWM RGB+DCCT</option--\x3e\n<option value="80">DDP RGB (network)</option>\n\x3c!--option value="81">E1.31 RGB (network)</option--\x3e\n\x3c!--option value="82">ArtNet RGB (network)</option--\x3e\n</select><br>\n<div id="co${a}" style="display:inline">Color Order:\n<select name="CO${a}">\n<option value="0">GRB</option>\n<option value="1">RGB</option>\n<option value="2">BRG</option>\n<option value="3">RBG</option>\n<option value="4">BGR</option>\n<option value="5">GBR</option>\n</select><br></div>\n<span id="psd${a}">Start:</span> <input type="number" name="LS${a}" id="ls${a}" class="l starts" min="0" max="8191" value="${lastEnd(a)}" oninput="startsDirty[${a}]=true;UI();" required />&nbsp;\n<div id="dig${a}c" style="display:inline">Length: <input type="number" name="LC${a}" class="l" min="1" max="${maxPB}" value="1" required oninput="UI()" /></div>\n<br>\n<span id="p0d${a}">GPIO:</span> <input type="number" name="L0${a}" min="0" max="33" required class="xs" onchange="UI()"/>\n<span id="p1d${a}"></span><input type="number" name="L1${a}" min="0" max="33" class="xs" onchange="UI()"/>\n<span id="p2d${a}"></span><input type="number" name="L2${a}" min="0" max="33" class="xs" onchange="UI()"/>\n<span id="p3d${a}"></span><input type="number" name="L3${a}" min="0" max="33" class="xs" onchange="UI()"/>\n<span id="p4d${a}"></span><input type="number" name="L4${a}" min="0" max="33" class="xs" onchange="UI()"/>\n<div id="dig${a}r" style="display:inline"><br><span id="rev${a}">Reversed</span>: <input type="checkbox" name="CV${a}"></div>\n<div id="dig${a}s" style="display:inline"><br>Skip first LEDs: <input type="number" name="SL${a}" min="0" max="255" value="0" oninput="UI()"></div>\n<div id="dig${a}f" style="display:inline"><br>Off Refresh: <input id="rf${a}" type="checkbox" name="RF${a}"></div>\n</div>`;i.insertAdjacentHTML("beforeend",s)}-1==e&&(t[--a].remove(),--a),gId("+").style.display=a<maxB-1?"inline":"none",gId("-").style.display=a>0?"inline":"none",n||UI()}}function addCOM(e=0,n=1,t=0){var a=d.getElementsByClassName("com_entry").length;if(!(a>=10)){var i=`<div class="com_entry">\n<hr style="width:260px">\n${a+1}: Start: <input type="number" name="XS${a}" id="xs${a}" class="l starts" min="0" max="65535" value="${e}" oninput="UI();" required="">&nbsp;\nLength: <input type="number" name="XC${a}" id="xc${a}" class="l" min="1" max="65535" value="${n}" required="" oninput="UI()">\n<div style="display:inline">Color Order:\n<select id="xo${a}" name="XO${a}">\n<option value="0">GRB</option>\n<option value="1">RGB</option>\n<option value="2">BRG</option>\n<option value="3">RBG</option>\n<option value="4">BGR</option>\n<option value="5">GBR</option>\n</select>\n</div><br></div>`;gId("com_entries").insertAdjacentHTML("beforeend",i),gId("xo"+a).value=t,btnCOM(a+1),UI()}}function remCOM(){var e=d.getElementsByClassName("com_entry"),n=e.length;0!==n&&(e[n-1].remove(),btnCOM(n-1),UI())}function resetCOM(e){e&&(maxCOOverrides=e);for(let e of d.getElementsByClassName("com_entry"))e.remove();btnCOM(0)}function btnCOM(e){gId("com_add").style.display=e<maxCOOverrides?"inline":"none",gId("com_rem").style.display=e>0?"inline":"none"}function addBtn(e,n,t){var a=gId("btns").innerHTML,i="BT"+String.fromCharCode((e<10?48:55)+e);a+=`Button ${e} GPIO: <input type="number" min="-1" max="40" name="${i}" onchange="UI()" class="xs" value="${n}">`,a+=`&nbsp;<select name="${"BE"+String.fromCharCode((e<10?48:55)+e)}">`,a+=`<option value="0" ${0==t?"selected":""}>Disabled</option>`,a+=`<option value="2" ${2==t?"selected":""}>Pushbutton</option>`,a+=`<option value="3" ${3==t?"selected":""}>Push inverted</option>`,a+=`<option value="4" ${4==t?"selected":""}>Switch</option>`,a+=`<option value="5" ${5==t?"selected":""}>PIR sensor</option>`,a+=`<option value="6" ${6==t?"selected":""}>Touch</option>`,a+=`<option value="7" ${7==t?"selected":""}>Analog</option>`,a+=`<option value="8" ${8==t?"selected":""}>Analog inverted</option>`,a+="</select>",a+=`<span style="cursor: pointer;" onclick="off('${i}')">&nbsp;&#215;</span><br>`,gId("btns").innerHTML=a}function Ps(){d.getElementById("mphv").style.display=d.getElementById("mxp").checked?"block":"none"}function MPDiv(){d.getElementById("mpdiv").style.display=1==d.getElementById("somp").value?"block":"none"}function tglSi(e){(customStarts=e)||(startsDirty=[]),UI()}function checkSi(){for(var e=!1,n=1;n<d.getElementsByClassName("iST").length;n++){parseInt(gId("ls"+(n-1)).value)+parseInt(d.getElementsByName("LC"+(n-1))[0].value)!=parseInt(gId("ls"+n).value)&&(e=!0,startsDirty[n]=!0)}0!=parseInt(gId("ls0").value)&&(e=!0,startsDirty[0]=!0),gId("si").checked=e,tglSi(e)}function uploadFile(e){var n=new XMLHttpRequest;n.addEventListener("load",(function(){showToast(this.responseText,this.status>=400)})),n.addEventListener("error",(function(e){showToast(e.stack,!0)})),n.open("POST","/upload");var t=new FormData;return t.append("data",d.Sf.data.files[0],e),n.send(t),d.Sf.data.value="",!1}function loadCfg(e){var n,t;"function"==typeof window.FileReader?(e.files?e.files[0]?(n=e.files[0],(t=new FileReader).onload=function(e){let n=e.target.result;var t=JSON.parse(n);if(t.hw){if(t.hw.led){for(var a=0;a<10;a++)addLEDs(-1);t.hw.led.ins.forEach((e,n,t)=>{addLEDs(1);for(var a=0;a<e.pin.length;a++)d.getElementsByName(`L${a}${n}`)[0].value=e.pin[a];d.getElementsByName("LT"+n)[0].value=e.type,d.getElementsByName("LS"+n)[0].value=e.start,d.getElementsByName("LC"+n)[0].value=e.len,d.getElementsByName("CO"+n)[0].value=e.order,d.getElementsByName("SL"+n)[0].value=e.skip,d.getElementsByName("RF"+n)[0].checked=e.ref,d.getElementsByName("CV"+n)[0].checked=e.rev})}if(t.hw.com&&(resetCOM(),t.hw.com.forEach(e=>{addCOM(e.start,e.len,e.order)})),t.hw.btn){var i=t.hw.btn;Array.isArray(i.ins)&&(gId("btns").innerHTML=""),i.ins.forEach((e,n,t)=>{addBtn(n,e.pin[0],e.type)}),d.getElementsByName("TT")[0].value=i.tt}t.hw.ir&&(d.getElementsByName("IR")[0].value=t.hw.ir.pin,d.getElementsByName("IT")[0].value=t.hw.ir.type),t.hw.relay&&(d.getElementsByName("RL")[0].value=t.hw.relay.pin,d.getElementsByName("RM")[0].checked=t.hw.relay.inv),UI()}},t.readAsText(n)):alert("Please select a JSON file first!"):alert("This browser doesn't support the `files` property of file inputs."),e.value=""):alert("The file API isn't supported on this browser yet.")}function S(){GetV(),checkSi(),setABL(),Ps(),MPDiv()}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post"><div class="topsettingsmenu"><div 
class="helpB"><button type="button" onclick="H()">?</button></div><button 
type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div><h2>LED &amp; Hardware setup</h2>Total LEDs: <span id="lc">?</span> <span 
id="pc"></span><br><i>Recommended power supply for brightest white:</i><br><b>
<span id="psu">?</span></b><br><span id="psu2"><br></span><br>Strip or panel: 
<select id="somp" name="SOMP" onchange="MPDiv()"><option value="0" 
selected="selected">1D Strip</option><option value="1">2D Matrix panel</option>
<option value="2">3D Cube (Experimental)</option></select><br><div id="mpdiv">
<h3>2D Matrix</h3>Width <input id="mxw" name="MXW" type="number" min="1" 
max="1500" oninput="UI()"> x Height <input id="mxh" name="MXH" type="number" 
min="1" max="1500" oninput="UI()"><br><div id="2dwarning" 
style="color:orange;display:inline">
&#9888; width x height should match LED count!<br></div><h3>2D Panels</h3><i>
A matrix is made of 1 or more identical physical led panels</i><br>
Multiple panels: <input type="checkbox" id="mxp" name="MXP" onclick="Ps()"><br>
<div id="mphv">Horizontal panels: <input name="MPH" type="number" min="1" 
max="8" oninput="UI()"> Vertical panels: <input name="MPV" type="number" 
min="1" max="8" oninput="UI()"><br></div><h3>2D Panel layout</h3>
First led position: <select name="PFLTB"><option value="0" selected="selected">
Top</option><option value="1">Bottom</option></select> <select name="PFLLR">
<option value="0" selected="selected">Left</option><option value="1">Right
</option></select><br>Orientation: <select name="POHV"><option value="0" 
selected="selected">Horizontal</option><option value="1">Vertical</option>
</select><br>Serpentine: <input type="checkbox" name="PNLS" checked="checked">
<br>Transpose: <input type="checkbox" name="PNLT" checked="checked"><br><br>
</div><br>Enable automatic brightness limiter: <input type="checkbox" 
name="ABen" onchange="enABL()" id="able"><br><div id="abl">Maximum Current: 
<input name="MA" type="number" class="l" min="250" max="65000" oninput="UI()" 
required> mA<br><div id="ampwarning" style="color:orange;display:none">
&#9888; Your power supply provides high current.<br>
To improve the safety of your setup,<br>please use thick cables,<br>
multiple power injection points and a fuse!<br></div><i>
Automatically limits brightness to stay close to the limit.<br>
Keep at &lt;1A if powering LEDs directly from the ESP 5V pin!<br>
If you are using an external power supply, enter its rating.<br>
(Current estimated usage: <span class="pow">unknown</span>)</i><br><br>
LED voltage (Max. current for a single LED):<br><select name="LAsel" 
onchange="enLA()"><option value="55" selected="selected">5V default (55mA)
</option><option value="35">5V efficient (35mA)</option><option value="30">
12V (30mA)</option><option value="255">WS2815 (12mA)</option><option value="50">
Custom</option></select><br><span id="LAdis" style="display:none">
Custom max. current per LED: <input name="LA" type="number" min="0" max="255" 
id="la" oninput="UI()" required> mA<br></span><i>
Keep at default if you are unsure about your type of LEDs.</i><br></div><h3>
Hardware setup</h3><div id="mLC">LED outputs:</div><hr style="width:260px">
<button type="button" id="+" onclick="addLEDs(1,!1)" 
style="display:none;border-radius:20px;height:36px">+</button> <button 
type="button" id="-" onclick="addLEDs(-1,!1)" 
style="display:none;border-radius:20px;width:36px;height:36px">-</button><br>
LED Memory Usage: <span id="m0">0</span> / <span id="m1">?</span> B<br><div 
id="dbar" 
style="display:inline-block;width:100px;height:10px;border-radius:20px"></div>
<br><div id="ledwarning" style="color:orange;display:none">
&#9888; You might run into stability or lag issues.<br>Use less than <span 
id="wreason">800 LEDs per output</span> for the best experience!<br></div><hr 
style="width:260px">Make a segment for each output: <input type="checkbox" 
name="MS"><br>Custom bus start indices: <input type="checkbox" 
onchange="tglSi(this.checked)" id="si"><br><hr style="width:260px"><div 
id="color_order_mapping">Color Order Override:<div id="com_entries"></div><hr 
style="width:260px"><button type="button" id="com_add" onclick="addCOM(),UI()" 
style="display:none;border-radius:20px;height:36px">+</button> <button 
type="button" id="com_rem" onclick="remCOM(),UI()" 
style="display:none;border-radius:20px;width:36px;height:36px">-</button><br>
</div><hr style="width:260px"><div id="btns"></div>Touch threshold: <input 
type="number" class="s" min="0" max="100" name="TT" required><br>IR GPIO: <input
 type="number" min="-1" max="40" name="IR" onchange="UI()" class="xs"><select 
name="IT" onchange="UI()"><option value="0">Remote disabled</option><option 
value="1">24-key RGB</option><option value="2">24-key with CT</option><option 
value="3">40-key blue</option><option value="4">44-key RGB</option><option 
value="5">21-key RGB</option><option value="6">6-key black</option><option 
value="7">9-key red</option><option value="8">JSON remote</option><option 
value="9">Athom 24key Music</option><option value="10">Athom 24key RGB</option>
</select><span style="cursor:pointer" onclick='off("IR")'>&nbsp;&#215;</span>
<br>Apply IR change to main segment only: <input type="checkbox" name="MSO"><br>
<div id="json" style="display:none">JSON file: <input type="file" name="data" 
accept=".json"> <input type="button" value="Upload" 
onclick='uploadFile("/ir.json")'><br></div><a 
href="https://kno.wled.ge/interfaces/infrared/" target="_blank">IR info</a><br>
Relay GPIO: <input type="number" min="-1" max="33" name="RL" onchange="UI()" 
class="xs"> Invert <input type="checkbox" name="RM"><span 
style="cursor:pointer" onclick='off("RL")'>&nbsp;&#215;</span><br><hr 
style="width:260px"><h3>Defaults</h3>Turn LEDs on after power up/reset: <input 
type="checkbox" name="BO"><br>Default brightness: <input name="CA" 
type="number" class="s" min="0" max="255" required> (0-255)<br><br>Apply preset 
<input name="BP" type="number" class="s" min="0" max="250" required>
 at boot (0 uses defaults)<br><br>Use Gamma correction for color: <input 
type="checkbox" name="GC"> (strongly recommended)<br>
Use Gamma correction for brightness: <input type="checkbox" name="GB">
 (not recommended)<br><br>Brightness factor: <input name="BF" type="number" 
class="s" min="1" max="255" required> %%<h3>Transitions</h3>Crossfade: <input 
type="checkbox" name="TF"><br>Transition Time: <input name="TD" type="number" 
class="l" min="0" max="65500"> ms<br>Enable Palette transitions: <input 
type="checkbox" name="PF"><h3>Timed light</h3>Default Duration: <input 
name="TL" type="number" class="s" min="1" max="255" required> min<br>
Default Target brightness: <input name="TB" type="number" class="s" min="0" 
max="255" required><br>Mode: <select name="TW"><option value="0">Wait and set
</option><option value="1">Fade</option><option value="2">Fade Color</option>
<option value="3">Sunrise</option></select><h3>White management</h3>
White Balance correction: <input type="checkbox" name="CCT"><br><span 
class="wc">Auto-calculate white channel from RGB:<br><select name="AW"><option 
value="0">None</option><option value="1">Brighter</option><option value="2">
Accurate</option><option value="3">Dual</option></select><br>
Calculate CCT from RGB: <input type="checkbox" name="CR"><br>
CCT additive blending: <input type="number" class="s" min="0" max="100" 
name="CB" required> %%</span><h3>Advanced</h3>Palette blending: <select 
name="PB"><option value="0">Linear (wrap if moving)</option><option value="1">
Linear (always wrap)</option><option value="2">Linear (never wrap)</option>
<option value="3">None (not recommended)</option></select><br>
Target refresh rate: <input type="number" class="s" min="1" max="120" name="FR" 
required> FPS<hr style="width:260px"><div id="cfg">Config template: <input 
type="file" name="data2" accept=".json"> <input type="button" value="Apply" 
onclick="loadCfg(d.Sf.data2)"><br></div><div style="margin-top:50px;height:1px">
</div><div class="bottomsettingsmenu"><button type="button" onclick="B()">Back
</button><button type="submit">Save</button></div></form><div id="toast"></div>
</body></html>)=====";


// Autogenerated from wled00/data/settings_sound.htm, do not edit!!
const char PAGE_settings_sound[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta 
name="viewport" content="width=500"><title>Sound Settings</title><script>
var d=document;function H(){window.open("https://github.com/atuline/WLED/wiki/Squelch-and-Gain")}function B(){window.open("/settings","_self")}function S(){GetV(),enDM()}function enDM(){var n=parseInt(d.getElementById("dme").value);d.getElementById("dm").style.display=n>=1?"inline":"none",d.getElementById("am").style.display=0==n?"inline":"none"}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post"><div class="topsettingsmenu"><div 
class="helpB"><button type="button" onclick="H()">?</button></div><button 
type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div><h2>Sound Input Settings</h2><p>Squelch: <input name="SQ" type="number" 
min="0" max="255" required><br>Gain: <input name="GN" type="number" min="0" 
max="255" required><br><i>
Gain=40 means an amplification of 1; 1 is about 1/12, 255 is about 6.5</i><br>
<i>
To tune, set input level slider to middle/128, start with Squelch=5..10 and Gain=40 and modify according to your setup
</i><br></p><p>Automatic Gain Control (AGC): <select name="AGC"><option 
value="0">Off</option><option value="1">Normal</option><option value="2">Vivid
</option><option value="3">Lazy</option></select><br><i>
If AGC is enabled, the input slider (🎚) will automatically be adjusted</i></p>
<h2>Sound Input Pin Manager</h2>Microphone type: <select id="dme" name="DMM" 
onchange="enDM()"><option value="0" selected="selected">Generic Analog</option>
<option value="1">Generic I2S</option><option value="2">ES7243</option><option 
value="3">SPH0654</option><option value="4">Generic I2S with Mclk</option>
<option value="5">Generic I2S PDM</option></select><br><div id="dm">I2S SD pin: 
<input type="number" min="-1" max="40" name="DI"><br>I2S WS pin: <input 
type="number" min="-1" max="40" name="LR"><br>I2S SCK pin: <input type="number" 
min="-1" max="40" name="CK"><br></div><i>
Changing the microphone type or pins requires a hard reset/power cycle</i><br>
<div id="am">Analog Input pin: <input type="number" min="-1" max="40" name="SI">
<br></div><div style="margin-top:50px;height:1px"></div><div 
class="bottomsettingsmenu"><button type="button" onclick="B()">Back</button>
<button type="submit">Save</button></div></form></body></html>)=====";


#ifdef WLED_ENABLE_DMX

// Autogenerated from wled00/data/settings_dmx.htm, do not edit!!
const char PAGE_settings_dmx[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta name="viewport" content="width=500">
<meta charset="utf-8"><title>DMX Settings</title><script>
function GCH(n){for(d=document,d.getElementById("dmxchannels").innerHTML+="",i=0;i<n;i++)d.getElementById("dmxchannels").innerHTML+="<span id=CH"+(i+1)+"s >Channel "+(i+1)+": <select name=CH"+(i+1)+' id="CH'+(i+1)+'"><option value=0>Set to 0</option><option value=1>Red</option><option value=2>Green</option><option value=3>Blue</option><option value=4>White</option><option value=5>Shutter (Brightness)</option><option value=6>Set to 255</option></select></span><br />\n'}function mMap(){for(d=document,numCh=document.Sf.CN.value,numGap=document.Sf.CG.value,parseInt(numCh)>parseInt(numGap)?d.getElementById("gapwarning").style.display="block":d.getElementById("gapwarning").style.display="none",i=0;i<15;i++)i>=numCh?(d.getElementById("CH"+(i+1)+"s").style.opacity="0.5",d.getElementById("CH"+(i+1)).disabled=!0):(d.getElementById("CH"+(i+1)+"s").style.opacity="1",d.getElementById("CH"+(i+1)).disabled=!1)}function S(){GCH(15),GetV(),mMap()}function H(){window.open("https://github.com/atuline/WLED/wiki/DMX")}function B(){window.history.back()}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post"><div class="topsettingsmenu"><div 
class="helpB"><button type="button" onclick="H()">?</button></div><button 
type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div><h2>Imma firin ma lazer (if it has DMX support)</h2>Proxy Universe <input 
name="PU" type="number" min="0" max="63999" required>
 from E1.31 to DMX (0=disabled)<br><i>
This will disable the LED data output to DMX configurable below</i><br><br><i>
Number of fixtures is taken from LED config page</i><br>
Channels per fixture (15 max): <input type="number" min="1" max="15" name="CN" 
maxlength="2" onchange="mMap()"><br>Start channel: <input type="number" min="1" 
max="512" name="CS" maxlength="2"><br>Spacing between start channels: <input 
type="number" min="1" max="512" name="CG" maxlength="2" onchange="mMap()"> [ <a 
href="javascript:alert('if set to 10, first fixture will start at 10,\nsecond will start at 20 etc.\nRegardless of the channel count.\nMakes memorizing channel numbers easier.');">
info</a> ]<br><div id="gapwarning" style="color:orange;display:none">
WARNING: Channel gap is lower than channels per fixture.<br>
This will cause overlap.</div><button type="button" 
onclick='location.href="/dmxmap"'>DMX Map</button><br>DMX fixtures start LED: 
<input type="number" min="0" max="1500" name="SL"><h3>Channel functions</h3><div
 id="dmxchannels"></div><div style="margin-top:50px;height:1px"></div><div 
class="bottomsettingsmenu"><button type="button" onclick="B()">Back</button>
<button type="submit">Save</button></div></form></body></html>)=====";


#else
const char PAGE_settings_dmx[] PROGMEM = R"=====()=====";
#endif

// Autogenerated from wled00/data/settings_ui.htm, do not edit!!
const char PAGE_settings_ui[] PROGMEM = R"=====(<!DOCTYPE html><html><head lang="en"><meta charset="utf-8"><meta 
name="viewport" content="width=500"><meta 
content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" 
name="viewport"><title>UI Settings</title><script>
var initial_ds,initial_st,timeout,d=document,sett=null,l={comp:{labels:"Show button labels",colors:{LABEL:"Color selection methods",picker:"Color Wheel",rgb:"RGB sliders",quick:"Quick color selectors",hex:"HEX color input"},pcmbot:"Show bottom tab bar in PC mode",pid:"Show preset IDs",seglen:"Set segment length instead of stop LED",css:"Enable custom CSS",hdays:"Enable custom Holidays list"},theme:{alpha:{bg:"Background opacity",tab:"Button opacity"},bg:{url:"BG image URL",random:"Random BG image"},color:{bg:"BG HEX color"}}};function gId(e){return d.getElementById(e)}function isObject(e){return e&&"object"==typeof e&&!Array.isArray(e)}function set(e,t,i){for(var n=t,s=e.split("_"),o=s.length,a=0;a<o-1;a++){var l=s[a];n[l]||(n[l]={}),n=n[l]}n[s[o-1]]=i}function showToast(e,t=!1){var i=gId("toast");i.innerHTML=e,i.className=t?"error":"show",clearTimeout(timeout),i.style.animation="none",timeout=setTimeout((function(){i.className=i.className.replace("show","")}),2900)}function addRec(e,t="",n=null){var s="";for(i in e){var o=t+(t?"_":"")+i;if(isObject(e[i]))n&&n[i]&&n[i].LABEL&&(s+=`<h3>${n[i].LABEL}</h3>`),s+=addRec(e[i],o,n?n[i]:null);else{var a=o;if(n&&n[i]?a=n[i]:e[i+"LABEL"]&&(a=e[i+"LABEL"]),i.indexOf("LABEL")>0)continue;var l=typeof e[i];gId(o)?("boolean"===l?gId(o).checked=e[i]:gId(o).value=e[i],gId(o).previousElementSibling.matches(".l")&&(gId(o).previousElementSibling.innerHTML=a)):"boolean"===l?s+=`${a}: <input class="agi cb" type="checkbox" id=${o} ${e[i]?"checked":""}><br>`:"number"===l?s+=`${a}: <input class="agi" type="number" id=${o} value=${e[i]}><br>`:"string"===l&&(s+=`${a}:<br><input class="agi" id=${o} value=${e[i]}><br>`)}}return s}function genForm(e){var t;t=addRec(e,"",l),gId("gen").innerHTML=t}function GetLS(){(sett=localStorage.getItem("wledUiCfg"))||(gId("lserr").style.display="inline");try{sett=JSON.parse(sett)}catch(e){sett={},gId("lserr").style.display="inline",gId("lserr").innerHTML="&#9888; Settings JSON parsing failed. ("+e+")"}genForm(sett),gId("dm").checked="light"===gId("theme_base").value}function SetLS(){for(var e=d.querySelectorAll(".agi"),t=0;t<e.length;t++){var i=e[t],n=i.classList.contains("cb")?i.checked:i.value;set(i.id,sett,n),console.log(`${i.id} set to ${n}`)}try{localStorage.setItem("wledUiCfg",JSON.stringify(sett)),gId("lssuc").style.display="inline"}catch(i){gId("lssuc").style.display="none",gId("lserr").style.display="inline",gId("lserr").innerHTML="&#9888; Settings JSON saving failed. ("+i+")"}}function Save(){SetLS(),d.Sf.DS.value==initial_ds&&d.Sf.ST.checked==initial_st||d.Sf.submit()}function S(){GetV(),initial_ds=d.Sf.DS.value,initial_st=d.Sf.ST.checked,GetLS()}function H(){window.open("https://github.com/atuline/WLED/wiki/Settings#user-interface-settings")}function B(){window.open("/settings","_self")}function UI(){gId("idonthateyou").style.display=gId("dm").checked?"inline":"none";var e=gId("theme_base");e&&(e.value=gId("dm").checked?"light":"dark")}function setRandomBg(){gId("theme_bg_random").checked?gId("theme_bg_url").value="https://picsum.photos/1920/1080":gId("theme_bg_url").value=""}function checkRandomBg(){"https://picsum.photos/1920/1080"===gId("theme_bg_url").value?gId("theme_bg_random").checked=!0:gId("theme_bg_random").checked=!1}function uploadFile(e,t){var i=new XMLHttpRequest;i.addEventListener("load",(function(){showToast(this.responseText,this.status>=400)})),i.addEventListener("error",(function(e){showToast(e.stack,!0)})),i.open("POST","/upload");var n=new FormData;return n.append("data",e.files[0],t),i.send(n),e.value="",!1}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post"><div class="topsettingsmenu"><div 
class="helpB"><button type="button" onclick="H()">?</button></div><button 
type="button" onclick="B()">Back</button><button type="button" onclick="Save()">
Save</button><div style="margin-bottom:10px"><span id="lssuc" 
style="color:green;display:none">&#10004; Local UI settings saved!</span> <span 
id="lserr" style="color:red;display:none">
&#9888; Could not access local storage. Make sure it is enabled in your browser.
</span></div></div><h2>Web Setup</h2>Server description: <input name="DS" 
maxlength="32"><br>Sync button toggles both send and receive: <input 
type="checkbox" name="ST"><br><i>
The following UI customization settings are unique both to the WLED device and this browser.
<br>
You will need to set them again if using a different browser, device or WLED IP address.
<br>Refresh the main UI to apply changes.</i><br><div id="gen">
Loading settings...</div><h3>UI Appearance</h3><span class="l"></span>: <input 
type="checkbox" id="comp_labels" class="agi cb"><br><span class="l"></span>: 
<input type="checkbox" id="comp_pcmbot" class="agi cb"><br><span class="l">
</span>: <input type="checkbox" id="comp_pid" class="agi cb"><br><span 
class="l"></span>: <input type="checkbox" id="comp_seglen" class="agi cb"><br>
I hate dark mode: <input type="checkbox" id="dm" onchange="UI()"><br><span 
id="idonthateyou" style="display:none"><i>Why would you? </i>&#x1F97A;<br>
</span><span class="l"></span>: <input type="number" min="0.0" max="1.0" 
step="0.01" id="theme_alpha_tab" class="agi"><br><span class="l"></span>: <input
 type="number" min="0.0" max="1.0" step="0.01" id="theme_alpha_bg" class="agi">
<br><span class="l"></span>: <input id="theme_color_bg" maxlength="9" 
class="agi"><br><span class="l">BG image URL</span>: <input id="theme_bg_url" 
class="agi" oninput="checkRandomBg()"><br><span class="l">Random BG image</span>
: <input type="checkbox" id="theme_bg_random" class="agi cb" 
onchange="setRandomBg()"><br><input id="theme_base" class="agi" 
style="display:none"> <span class="l"></span>: <input type="checkbox" 
id="comp_css" class="agi cb"><br><div id="skin">Custom CSS: <input type="file" 
name="data" accept=".css"> <input type="button" value="Upload" 
onclick='uploadFile(d.Sf.data,"/skin.css")'><br></div><span class="l"></span>: 
<input type="checkbox" id="comp_hdays" class="agi cb"><br><div id="holidays">
Holidays: <input type="file" name="data2" accept=".json"> <input type="button" 
value="Upload" onclick='uploadFile(d.Sf.data2,"/holidays.json")'><br></div><div 
id="toast"></div><div style="margin-top:50px;height:1px"></div><div 
class="bottomsettingsmenu"><button type="button" onclick="B()">Back</button>
<button type="button" onclick="Save()">Save</button></div></form></body></html>)=====";


// Autogenerated from wled00/data/settings_sync.htm, do not edit!!
const char PAGE_settings_sync[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta name="viewport" content="width=500">
<meta charset="utf-8"><title>Sync Settings</title><script>
var d=document;function gId(e){return d.getElementById(e)}function doHide(e){gId(e).style.display="none"}function doShow(e){gId(e).style.display="block"}function hideALEXA(){gId("aleOnOff").style.display="none"}function hideNoALEXA(){gId("aleOnOff2").style.display="none"}function hideBLYNK(){gId("blyOnOff").style.display="none"}function hideNoBLYNK(){gId("blyOnOff2").style.display="none"}function hideMQTT(){gId("mqtOnOff").style.display="none"}function hideNoMQTT(){gId("mqtOnOff2").style.display="none"}function hideHUE(){gId("hueOnOff").style.display="none"}function hideNoHUE(){gId("hueOnOff2").style.display="none"}function H(){window.open("https://kno.wled.ge/interfaces/udp-notifier/")}function B(){window.open("/settings","_self")}function adj(){6454==d.Sf.DI.value?(1==d.Sf.DA.value&&(d.Sf.DA.value=0),1==d.Sf.EU.value&&(d.Sf.EU.value=0)):5568==d.Sf.DI.value&&(0==d.Sf.DA.value&&(d.Sf.DA.value=1),0==d.Sf.EU.value&&(d.Sf.EU.value=1))}function FC(){for(j=0;j<8;j++)gId("G"+(j+1)).checked=gId("GS").value>>j&1,gId("R"+(j+1)).checked=gId("GR").value>>j&1}function GC(){var e=0,n=0,d=1;for(j=0;j<8;j++)e+=gId("G"+(j+1)).checked*d,n+=gId("R"+(j+1)).checked*d,d*=2;gId("GS").value=e,gId("GR").value=n}function SP(){var e=d.Sf.DI.value;gId("xp").style.display=e>0?"none":"block",e>0&&(d.Sf.EP.value=e)}function SetVal(){switch(parseInt(d.Sf.EP.value)){case 5568:d.Sf.DI.value=5568;break;case 6454:d.Sf.DI.value=6454;break;case 4048:d.Sf.DI.value=4048}SP(),FC()}function S(){GetV(),SetVal()}function GetV() {
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post" onsubmit="GC()"><div 
class="topsettingsmenu"><div class="helpB"><button type="button" onclick="H()">?
</button></div><button type="button" onclick="B()">Back</button><button 
type="submit">Save</button></div><h2>Sync setup</h2><h3>Hypnotik Broadcast</h3>
UDP Port: <input name="UP" type="number" min="1" max="65535" class="d5" 
required><br>2nd Port: <input name="U2" type="number" min="1" max="65535" 
class="d5" required><br><br><input name="GS" id="GS" type="number" 
style="display:none"> <input name="GR" id="GR" type="number" 
style="display:none"><table style="margin:0 auto"><tr><td>Sync groups</td><td>1
</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td></tr>
<tr><td>Send:</td><td><input type="checkbox" id="G1" name="G1"></td><td><input 
type="checkbox" id="G2" name="G2"></td><td><input type="checkbox" id="G3" 
name="G3"></td><td><input type="checkbox" id="G4" name="G4"></td><td><input 
type="checkbox" id="G5" name="G5"></td><td><input type="checkbox" id="G6" 
name="G6"></td><td><input type="checkbox" id="G7" name="G7"></td><td><input 
type="checkbox" id="G8" name="G8"></td></tr><tr><td>Receive:</td><td><input 
type="checkbox" id="R1" name="R1"></td><td><input type="checkbox" id="R2" 
name="R2"></td><td><input type="checkbox" id="R3" name="R3"></td><td><input 
type="checkbox" id="R4" name="R4"></td><td><input type="checkbox" id="R5" 
name="R5"></td><td><input type="checkbox" id="R6" name="R6"></td><td><input 
type="checkbox" id="R7" name="R7"></td><td><input type="checkbox" id="R8" 
name="R8"></td></tr></table><br>Receive: <input type="checkbox" name="RB">
 Brightness, <input type="checkbox" name="RC"> Color, and <input 
type="checkbox" name="RX"> Effects<br><input type="checkbox" name="SO">
 Segment options, <input type="checkbox" name="SG"> bounds<br>
Send notifications on direct change: <input type="checkbox" name="SD"><br>
Send notifications on button press or IR: <input type="checkbox" name="SB"><br>
Send Alexa notifications: <input type="checkbox" name="SA"><br>
Send Philips Hue change notifications: <input type="checkbox" name="SH"><br>
Send Macro notifications: <input type="checkbox" name="SM"><br>
Send notifications twice: <input type="checkbox" name="S2"><br><i>
Reboot required to apply changes.</i><h3>Instance List</h3>
Enable instance list: <input type="checkbox" name="NL"><br>
Make this instance discoverable: <input type="checkbox" name="NB"><h3>Realtime
</h3>Receive UDP realtime: <input type="checkbox" name="RD"><br>
Use main segment only: <input type="checkbox" name="MO"><br><br><i>
Network DMX input</i><br>Type: <select name="DI" onchange="SP(),adj()"><option 
value="5568">E1.31 (sACN)</option><option value="6454">Art-Net</option><option 
value="0" selected="selected">Custom port</option></select><br><div id="xp">
Port: <input name="EP" type="number" min="1" max="65535" value="5568" 
class="d5" required><br></div>Multicast: <input type="checkbox" name="EM"><br>
Start universe: <input name="EU" type="number" min="0" max="63999" required><br>
<i>Reboot required.</i> Check out <a href="https://github.com/LedFx/LedFx" 
target="_blank">LedFx</a>!<br>Skip out-of-sequence packets: <input 
type="checkbox" name="ES"><br>DMX start address: <input name="DA" type="number" 
min="0" max="510" required><br>DMX mode: <select name="DM"><option value="0">
Disabled</option><option value="1">Single RGB</option><option value="2">
Single DRGB</option><option value="3">Effect</option><option value="4">Multi RGB
</option><option value="5">Dimmer + Multi RGB</option><option value="6">
Multi RGBW</option></select><br><a 
href="https://kno.wled.ge/interfaces/e1.31-dmx/" target="_blank">E1.31 info</a>
<br>Timeout: <input name="ET" type="number" min="1" max="65000" required> ms<br>
Force max brightness: <input type="checkbox" name="FB"><br>
Disable realtime gamma correction: <input type="checkbox" name="RG"><br>
Realtime LED offset: <input name="WO" type="number" min="-255" max="255" 
required><h3>Alexa Voice Assistant</h3><div id="aleOnOff2"><em 
style="color:#ff8c00">This firmware build does not include Alexa support.<br>
</em></div><div id="aleOnOff">Emulate Alexa device: <input type="checkbox" 
name="AL"><br>Alexa invocation name: <input type="text" name="AI" 
maxlength="32"></div><h3>Blynk</h3><div id="blyOnOff2"><em 
style="color:#ff8c00">This firmware build does not include Blynk support.<br>
</em></div><b>Blynk, MQTT and Hue sync all connect to external hosts!<br>
This may impact the responsiveness of the ESP microcontroller.</b><br>
For best results, only use one of these services at a time.<br>
(alternatively, connect a second ESP to them and use the UDP sync)<br><br><div 
id="blyOnOff">Host: <input type="text" name="BH" maxlength="32"> Port: <input 
name="BP" type="number" min="1" max="65535" value="80" class="d5"><br>
Device Auth token: <input name="BK" maxlength="33"><br><i>
Clear the token field to disable. </i><a 
href="https://kno.wled.ge/interfaces/blynk/" target="_blank">Setup info</a>
</div><h3>MQTT</h3><div id="mqtOnOff2"><em style="color:#ff8c00">
This firmware build does not include MQTT support.<br></em></div><div 
id="mqtOnOff">Enable MQTT: <input type="checkbox" name="MQ"><br>Broker: <input 
type="text" name="MS" maxlength="32"> Port: <input name="MQPORT" type="number" 
min="1" max="65535" class="d5"><br><b>
The MQTT credentials are sent over an unsecured connection.<br>
Never use the MQTT password for another service!</b><br>Username: <input 
type="text" name="MQUSER" maxlength="40"><br>Password: <input type="password" 
name="MQPASS" maxlength="64"><br>Client ID: <input type="text" name="MQCID" 
maxlength="40"><br>Device Topic: <input type="text" name="MD" maxlength="32">
<br>Group Topic: <input type="text" name="MG" maxlength="32"><br>
Publish on button press: <input type="checkbox" name="BM"><br><i>
Reboot required to apply changes. </i><a 
href="https://kno.wled.ge/interfaces/mqtt/" target="_blank">MQTT info</a></div>
<h3>Philips Hue</h3><div id="hueOnOff2"><em style="color:#ff8c00">
This firmware build does not include Philips Hue support.<br></em></div><div 
id="hueOnOff"><i>
You can find the bridge IP and the light number in the 'About' section of the hue app.
</i><br>Poll Hue light <input name="HL" type="number" min="1" max="99"> every 
<input name="HI" type="number" min="100" max="65000"> ms: <input 
type="checkbox" name="HP"><br>Then, receive <input type="checkbox" name="HO">
 On/Off, <input type="checkbox" name="HB"> Brightness, and <input 
type="checkbox" name="HC"> Color<br>Hue Bridge IP:<br><input name="H0" 
type="number" class="s" min="0" max="255"> . <input name="H1" type="number" 
class="s" min="0" max="255"> . <input name="H2" type="number" class="s" min="0" 
max="255"> . <input name="H3" type="number" class="s" min="0" max="255"><br><b>
Press the pushlink button on the bridge, after that save this page!</b><br>
(when first connecting)<br></div>Hue status: <span class="sip">
Disabled in this build</span><h3>Serial</h3>Baud rate: <select name="BD"><option
 value="1152">115200</option><option value="2304">230400</option><option 
value="4608">460800</option><option value="5000">500000</option><option 
value="5760">576000</option><option value="9216">921600</option><option 
value="10000">1000000</option><option value="15000">1500000</option></select>
<br><i>Keep at 115200 to use Improv. Some boards may not support high rates.</i>
<h3>Audio Sync</h3>Mode: <select name="ASE"><option value="0">Disabled</option>
<option value="1">Transmit</option><option value="2">Receive</option></select>
 Port: <input name="ASP" type="number" min="1" max="65535" class="d5"><br><i>
Reboot required for changes to take effect.</i><div 
style="margin-top:50px;height:1px"></div><div class="bottomsettingsmenu"><button
 type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div></form></body></html>)=====";


// Autogenerated from wled00/data/settings_time.htm, do not edit!!
const char PAGE_settings_time[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta name="viewport" content="width=500">
<meta charset="utf-8"><title>Time Settings</title><script>
var d=document,el=!1,ms=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],cals='style="font-size:27px;margin-top:-6px;cursor:pointer"';function H(){window.open("https://kno.wled.ge/features/settings/#time-settings")}function B(){window.open("/settings","_self")}function S(){BTa(),GetV(),updLoc(),Cs(),FC()}function gId(t){return d.getElementById(t)}function gN(t){return d.getElementsByName(t)[0]}function expand(t,e){var n=gId("WD"+e);n.style.display="none"!==n.style.display?"none":"",t.innerHTML="none"===n.style.display?"&#128197;":"&#x2715;"}function Cs(){gId("cac").style.display=gN("OL").checked?"block":"none"}function BTa(){var t="<tr><th>En.</th><th>Hour</th><th>Minute</th><th>Preset</th><th></th></tr>";for(i=0;i<8;i++){for(t+=`<tr><td><input name="W${i}" id="W${i}" type="hidden"><input id="W${i}0" type="checkbox"></td>\n<td><input name="H${i}" class="xs" type="number" min="0" max="24"></td>\n<td><input name="N${i}" class="xs" type="number" min="0" max="59"></td>\n<td><input name="T${i}" class="s" type="number" min="0" max="250"></td>\n<td><div id="CB${i}" onclick="expand(this,${i})" ${cals}>&#128467;</div></td></tr>`,t+=`<tr><td colspan=5><div id="WD${i}" style="display:none;">Run on weekdays`,t+='<table style="width:100%%;"><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>',j=1;j<8;j++)t+=`<td><input id="W${i}${j}" type="checkbox"></td>`;for(t+=`</tr></table>from\n<select name="M${i}">`,j=0;j<12;j++)t+=`<option value="${j+1}">${ms[j]}</option>`;for(t+=`</select><input name="D${i}" class="xs" type="number" min="1" max="31"></input> to\n<select name="P${i}">`,j=0;j<12;j++)t+=`<option value="${j+1}">${ms[j]}</option>`;t+=`</select><input name="E${i}" class="xs" type="number" min="1" max="31"></input>\n\t\t<hr></div></td></tr>`}for(t+=`<tr><td><input name="W8" id="W8" type="hidden"><input id="W80" type="checkbox"></td>\n<td>Sunrise<input name="H8" value="255" type="hidden"></td>\n<td><input name="N8" class="xs" type="number" min="-59" max="59"></td>\n<td><input name="T8" class="s" type="number" min="0" max="250"></td>\n<td><div id="CB8" onclick="expand(this,8)" ${cals}>&#128467;</div></td></tr><tr><td colspan=5>`,t+='<div id="WD8"style="display:none;"><table style="width:100%%;"><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>',j=1;j<8;j++)t+=`<td><input id="W8${j}" type="checkbox"></td>`;for(t+="</tr></table><hr></div></td></tr>",t+=`<tr><td><input name="W9" id="W9" type="hidden"><input id="W90" type="checkbox"></td>\n<td>Sunset<input name="H9" value="255" type="hidden"></td>\n<td><input name="N9" class="xs" type="number" min="-59" max="59"></td>\n<td><input name="T9" class="s" type="number" min="0" max="250"></td>\n<td><div id="CB9" onclick="expand(this,9)" ${cals}>&#128467;</div></td></tr><tr><td colspan=5>`,t+='<div id="WD9" style="display:none;"><table style="width:100%%;"><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>',j=1;j<8;j++)t+=`<td><input id="W9${j}" type="checkbox"></td>`;t+="</tr></table><hr></div></td></tr>",gId("TMT").innerHTML=t}function FC(){for(i=0;i<10;i++){let t=gId("W"+i).value;for(j=0;j<8;j++)gId("W"+i+j).checked=t>>j&1;(254!=(254&t)||i<8&&(1!=gN("M"+i).value||1!=gN("D"+i).value||12!=gN("P"+i).value||31!=gN("E"+i).value))&&expand(gId("CB"+i),i)}}function Wd(){for(a=[0,0,0,0,0,0,0,0,0,0],i=0;i<10;i++){for(m=1,j=0;j<8;j++)a[i]+=gId("W"+i+j).checked*m,m*=2;gId("W"+i).value=a[i]}"S"===d.Sf.LTR.value&&(d.Sf.LT.value=-1*parseFloat(d.Sf.LT.value)),"W"===d.Sf.LNR.value&&(d.Sf.LN.value=-1*parseFloat(d.Sf.LN.value))}function addRow(t,e,n,i){var d=gId("macros"),a=d.rows.length,l=d.insertRow(a),s=String.fromCharCode((t<10?48:55)+t);document.createElement("td");l.insertCell(0).innerHTML=`Button ${t}:`,l.insertCell(1).innerHTML=`<input name="MP${s}" type="number" class="s" min="0" max="250" value="${e}" required>`,l.insertCell(2).innerHTML=`<input name="ML${s}" type="number" class="s" min="0" max="250" value="${n}" required>`,l.insertCell(3).innerHTML=`<input name="MD${s}" type="number" class="s" min="0" max="250" value="${i}" required>`}function getLoc(){el||(window.addEventListener("message",t=>{"https://locate.wled.me"===t.origin&&t.data instanceof Object&&(d.Sf.LT.value=t.data.lat,d.Sf.LN.value=t.data.lon,updLoc())},!1),el=!0),window.open("https://locate.wled.me","_blank")}function updLoc(t){parseFloat(d.Sf.LT.value)<0?(d.Sf.LTR.value="S",d.Sf.LT.value=-1*parseFloat(d.Sf.LT.value)):d.Sf.LTR.value="N",parseFloat(d.Sf.LN.value)<0?(d.Sf.LNR.value="W",d.Sf.LN.value=-1*parseFloat(d.Sf.LN.value)):d.Sf.LNR.value="E"}function GetV() {
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post" onsubmit="Wd()"><div 
class="topsettingsmenu"><div class="helpB"><button type="button" onclick="H()">?
</button></div><button type="button" onclick="B()">Back</button><button 
type="submit">Save</button></div><h2>Time setup</h2>Get time from NTP server: 
<input type="checkbox" name="NT"><br><input type="text" name="NS" 
maxlength="32"><br>Use 24h format: <input type="checkbox" name="CF"><br>
Time zone: <select name="TZ"><option value="0" selected="selected">GMT(UTC)
</option><option value="1">GMT/BST</option><option value="2">CET/CEST</option>
<option value="3">EET/EEST</option><option value="4">US-EST/EDT</option><option 
value="5">US-CST/CDT</option><option value="6">US-MST/MDT</option><option 
value="7">US-AZ</option><option value="8">US-PST/PDT</option><option value="9">
CST(AWST)</option><option value="10">JST(KST)</option><option value="11">
AEST/AEDT</option><option value="12">NZST/NZDT</option><option value="13">
North Korea</option><option value="14">IST (India)</option><option value="15">
CA-Saskatchewan</option><option value="16">ACST</option><option value="17">
ACST/ACDT</option><option value="18">HST (Hawaii)</option><option value="19">
NOVT (Novosibirsk)</option><option value="20">AKST/AKDT (Anchorage)</option>
<option value="21">MX-CST/CDT</option><option value="22">PKT (Pakistan)</option>
</select><br>UTC offset: <input name="UO" type="number" min="-65500" 
max="65500" required> seconds (max. 18 hours)<br>Current local time is <span 
class="times">unknown</span>.<br>Latitude: <select name="LTR"><option value="N">
N</option><option value="S">S</option></select><input name="LT" type="number" 
class="xl" min="0" max="66.6" step="0.01"><br>Longitude: <select name="LNR">
<option value="E">E</option><option value="W">W</option></select><input 
name="LN" type="number" class="xl" min="0" max="180" step="0.01"><br><button 
type="button" id="locbtn" onclick="getLoc()">Get location</button><div><i>
(opens new tab, only works in browser)</i></div><div id="sun" class="times">
</div><h3>Clock</h3>Analog Clock overlay: <input type="checkbox" name="OL" 
onchange="Cs()"><br><div id="cac">First LED: <input name="O1" type="number" 
min="0" max="255" required> Last LED: <input name="O2" type="number" min="0" 
max="255" required><br>12h LED: <input name="OM" type="number" min="0" 
max="255" required><br>Show 5min marks: <input type="checkbox" name="O5"><br>
Seconds (as trail): <input type="checkbox" name="OS"><br></div>Countdown Mode: 
<input type="checkbox" name="CE"><br>Countdown Goal:<br>Date:&nbsp;<nowrap>20
<input name="CY" class="xs" type="number" min="0" max="99" required>-<input 
name="CI" class="xs" type="number" min="1" max="12" required>-<input name="CD" 
class="xs" type="number" min="1" max="31" required></nowrap><br>Time:<nowrap>
<input name="CH" class="xs" type="number" min="0" max="23" required>:<input 
name="CM" class="xs" type="number" min="0" max="59" required>:<input name="CS" 
class="xs" type="number" min="0" max="59" required></nowrap><br><h3>
Macro presets</h3><b>Macros have moved!</b><br><i>
Presets now also can be used as macros to save both JSON and HTTP API commands.
<br>Just enter the preset ID below!</i> <i>
Use 0 for the default action instead of a preset</i><br>Alexa On/Off Preset: 
<input name="A0" class="m" type="number" min="0" max="250" required> <input 
name="A1" class="m" type="number" min="0" max="250" required><br>
Countdown-Over Preset: <input name="MC" class="m" type="number" min="0" 
max="250" required><br>Timed-Light-Over Presets: <input name="MN" class="m" 
type="number" min="0" max="250" required><br><h3>Button actions</h3><table 
style="margin:0 auto" id="macros"><thead><tr><td>push<br>switch</td><td>short
<br>on-&gt;off</td><td>long<br>off-&gt;on</td><td>double<br>N/A</td></tr>
</thead><tbody></tbody></table><a 
href="https://kno.wled.ge/features/macros/#analog-button" target="_blank">
Analog Button setup</a><h3>Time-controlled presets</h3><div 
style="display:inline-block"><table id="TMT" style="min-width:330px"></table>
</div><div style="margin-top:50px;height:1px"></div><div 
class="bottomsettingsmenu"><button type="button" onclick="B()">Back</button>
<button type="submit">Save</button></div></form></body></html>)=====";


// Autogenerated from wled00/data/settings_sec.htm, do not edit!!
const char PAGE_settings_sec[] PROGMEM = R"=====(<!DOCTYPE html><html lang="en"><head><meta name="viewport" content="width=500">
<meta charset="utf-8"><title>Misc Settings</title><script>
var timeout,d=document;function H(){window.open("https://github.com/atuline/WLED/wiki/Settings#security-settings")}function B(){window.open("/settings","_self")}function U(){window.open("/update","_self")}function gId(t){return d.getElementById(t)}function isObject(t){return t&&"object"==typeof t&&!Array.isArray(t)}function showToast(t,e=!1){var n=gId("toast");n.innerHTML=t,n.className=e?"error":"show",clearTimeout(timeout),n.style.animation="none",timeout=setTimeout((function(){n.className=n.className.replace("show","")}),2900)}function uploadFile(t,e){var n=new XMLHttpRequest;n.addEventListener("load",(function(){showToast(this.responseText,this.status>=400)})),n.addEventListener("error",(function(t){showToast(t.stack,!0)})),n.open("POST","/upload");var o=new FormData;return o.append("data",t.files[0],e),n.send(o),t.value="",!1}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="GetV()">
<form id="form_s" name="Sf" method="post"><div class="topsettingsmenu"><div 
class="helpB"><button type="button" onclick="H()">?</button></div><button 
type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div><h2>Security & Update setup</h2>Lock wireless (OTA) software update: 
<input type="checkbox" name="NO"><br>Passphrase: <input type="password" 
name="OP" maxlength="32"><br>
To enable OTA, for security reasons you need to also enter the correct password!
<br>The password should be changed when OTA is enabled.<br><b>
Disable OTA when not in use, otherwise an attacker can reflash device software!
</b><br><i>Settings on this page are only changable if OTA lock is disabled!</i>
<br>Deny access to WiFi settings if locked: <input type="checkbox" name="OW">
<br><br>Factory reset: <input type="checkbox" name="RS"><br>
All settings and presets will be erased.<br><br>
HTTP traffic is unencrypted. An attacker in the same network can intercept form data!
<h3>Software Update</h3><button type="button" onclick="U()">Manual OTA Update
</button><br>Enable ArduinoOTA: <input type="checkbox" name="AO"><br><h3>
Backup & Restore</h3><a class="btn lnk" href="/presets.json?download" 
target="download-frame">Backup presets</a><br><div>Restore presets<br><input 
type="file" name="data" accept=".json"> <input type="button" value="Upload" 
onclick='uploadFile(d.Sf.data,"/presets.json")'><br></div><br><a 
class="btn lnk" href="/cfg.json?download" target="download-frame">
Backup configuration</a><br><div>Restore configuration<br><input type="file" 
name="data2" accept=".json"> <input type="button" value="Upload" 
onclick='uploadFile(d.Sf.data2,"/cfg.json")'><br></div><div style="color:#fa0">
&#9888; Restoring presets/configuration will OVERWRITE your current presets/configuration.
<br>
Incorrect configuration may require a factory reset or re-flashing of your ESP.
</div>For security reasons, passwords are not backed up.<br><div 
style="margin-top:50px;height:1px"></div><div class="bottomsettingsmenu"><button
 type="button" onclick="B()">Back</button><button type="submit">Save</button>
</div></form><iframe name="download-frame" style="display:none"></iframe></body>
</html>)=====";


// Autogenerated from wled00/data/settings_um.htm, do not edit!!
const char PAGE_settings_um[] PROGMEM = R"=====(<!DOCTYPE html><html><head lang="en"><meta charset="utf-8"><meta 
name="viewport" content="width=500"><meta 
content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" 
name="viewport"><title>Usermod Settings</title><script>
var owner,locip,urows,d=document,umCfg={},pins=[6,7,8,9,10,11],pinO=["rsvd","rsvd","rsvd","rsvd","rsvd","rsvd"],loc=!1,numM=0;function gId(e){return d.getElementById(e)}function isO(e){return e&&"object"==typeof e&&!Array.isArray(e)}function H(){window.open("https://github.com/atuline/WLED/wiki/Settings#usermod-settings")}function B(){window.open("/settings","_self")}function S(){"file:"==window.location.protocol&&(loc=!0,(locip=localStorage.getItem("locIp"))||(locip=prompt("File Mode. Please enter WLED IP!"),localStorage.setItem("locIp",locip))),GetV(),numM>0||locip?ldS():gId("um").innerHTML="No Usermods installed."}function isF(e){return e===+e&&e!==(0|e)}function isI(e){return e===+e&&e===(0|e)}function check(e,t){var n=e.name.replace("[]","").substr(-3);if("number"==e.type&&"pin"==n.substr(0,3))for(var i=0;i<pins.length;i++)if(t!=pinO[i]){if(e.value==pins[i]||e.value<-1||e.value>39){e.style.color="red";break}e.style.color=e.value>33?"orange":"#fff"}}function getPins(e){if(isO(e))for(const[n,i]of Object.entries(e))if(isO(i))owner=n,getPins(i);else if("pin"==n.replace("[]","").substr(-3))if(Array.isArray(i))for(var t=0;t<i.length;t++)i[t]>=0&&(pins.push(i[t]),pinO.push(owner));else i>=0&&(pins.push(i),pinO.push(owner));else if(Array.isArray(i))for(t=0;t<i.length;t++)getPins(i[t])}function addField(e,t,n,i=!1){if(isO(n))for(const[i,r]of Object.entries(n))"unknown"===t||e.includes(":")?addField(e,i,r):addField(e+":"+t,i,r);else if(Array.isArray(n))for(var r=0;r<n.length;r++)addField(e,t,n[r],!0);else{var s,o=typeof n;switch(o){case"boolean":o="checkbox",s='value="true"'+(n?" checked":"");break;case"number":s=`value="${n}"`,"pin"===t.substr(-3)?(s+=' max="39" min="-1" style="width:40px;"',o="int"):s+=' step="any" style="width:100px;"';break;default:o="text",s=`value="${n}" style="width:250px;"`}e.includes(":")&&(urows+=e.substr(e.indexOf(":")+1)),urows+=` ${t}: `,"checkbox"==o?urows+=`<input type="hidden" name="${e}:${t}${i?"[]":""}" value="false">`:i||(urows+=`<input type="hidden" name="${e}:${t}${i?"[]":""}" value="${o}">`),urows+=`<input type="${"int"===o?"number":o}" name="${e}:${t}${i?"[]":""}" ${s} oninput="check(this,'${e.substr(e.indexOf(":")+1)}')"><br>`}}function addDropdown(e,t){let n=d.createElement("select"),i=d.getElementsByName(e+":"+t)[1];if(i&&"INPUT"===i.tagName&&("text"===i.type||"number"===i.type)){let e=i.value;i.name;for(var r=0;r<i.attributes.length;++r){var s=i.attributes[r];"type"!=s.name&&"value"!=s.name&&"class"!=s.name&&"style"!=s.name&&n.setAttribute(s.name,s.value)}return n.setAttribute("data-val",e),i.parentElement.replaceChild(n,i),n}return null}function addOption(e,t,n){if(null===e)return;let i=d.createElement("option");i.value=n,i.text=t,e.appendChild(i);for(let t=0;t<e.childNodes.length;t++){e.childNodes[t].value==e.dataset.val&&(e.selectedIndex=t)}}function addInfo(e,t,n,i=""){let r=d.getElementsByName(e);r.length&&("string"==typeof t&&r[0]?r[0].placeholder=t:r[t]&&(""!=n&&r[t].insertAdjacentHTML("afterend","&nbsp;"+n),""!=i&&r[t].insertAdjacentHTML("beforebegin",i+"&nbsp;")))}function ldS(){fetch((loc?"http://"+locip:"")+"/cfg.json",{method:"get"}).then(e=>(e.ok||(gId("lserr").style.display="inline"),e.json())).then(e=>{if(umCfg=e.um,getPins(e),urows="",isO(umCfg))for(const[e,t]of Object.entries(umCfg))urows+=`<hr><h3>${e}</h3>`,addField(e,"unknown",t);""===urows&&(urows="Usermods configuration not found.<br>Press <i>Save</i> to initialize defaults."),gId("um").innerHTML=urows}).catch((function(e){gId("lserr").style.display="inline",console.log(e)}))}function svS(e){e.preventDefault(),console.log(d.Sf),d.Sf.checkValidity()&&d.Sf.submit()}function GetV() {var d=document;
%CSS%%SCSS%</head><body onload="S()"><form
 id="form_s" name="Sf" method="post" onsubmit="svS(event)"><div 
class="topsettingsmenu" 
style="position:sticky;width:100vw;top:0;background-color:#000;border-bottom:2px solid #fff;margin-top:-1px;z-index:100">
<div class="helpB" 
style="text-align:left;position:absolute;left:10px;width:60px"><button 
type="button" onclick="H()" style="width:40px">?</button></div><button 
type="button" onclick="B()" 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:#000;color:#fff;border-radius:25px" 
onmouseenter='this.style.background="#fff",this.style.color="#000"' 
onmouseleave='this.style.background="#000",this.style.color="#fff"'>Back
</button><button 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:#000;color:#fff;border-radius:25px" 
type="submit" 
onmouseenter='this.style.background="#fff",this.style.color="#000"' 
onmouseleave='this.style.background="#000",this.style.color="#fff"'>Save
</button></div><span id="lssuc" style="color:green;display:none">
&#10004; Configuration saved!</span> <span id="lserr" 
style="color:red;display:none">&#9888; Could not load configuration.</span><div 
class="middle"><h2>Usermod Setup</h2><div id="um">Loading settings...</div>
</div><div style="margin-top:50px;height:1px"></div><div 
class="bottomsettingsmenu" 
style="position:fixed;width:100vw;bottom:0;background-color:#000;border-top:2px solid #fff;margin-bottom:-1px;margin-top:100px;z-index:100">
<button type="button" onclick="B()" 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:#000;color:#fff;border-radius:25px" 
onmouseenter='this.style.background="#fff",this.style.color="#000"' 
onmouseleave='this.style.background="#000",this.style.color="#fff"'>Back
</button><button 
style="outline:0;cursor:pointer;padding:5px 10px;margin:10px;text-transform:uppercase;font-size:15px;font-style:normal;font-weight:550;line-height:normal;border:1px solid var(--black-500,#909090);background:#000;color:#fff;border-radius:25px" 
onmouseenter='this.style.background="#fff",this.style.color="#000"' 
onmouseleave='this.style.background="#000",this.style.color="#fff"' 
type="submit">Save</button></div></form></body></html>)=====";

